import re
import logging
from typing import List, Dict, Any, Optional
from .base_scraper import BaseScraper
from ..configs.dobrovsky_config import DOBROVSKY_BASE_CONFIG

class DobroskyScraper(BaseScraper):
    def __init__(self):
        super().__init__()
        self.base_config = DOBROVSKY_BASE_CONFIG
        self.logger = logging.getLogger('div_management.scraping.dobrovsky')
    
    def get_books_list(self, limit: int = 100, offset: int = 0) -> List[Dict[str, Any]]:
        try:
            self.logger.info(f"üì• DEBUG: Scraping Dobrovsk√Ω (limit: {limit})")
            
            url = f"{self.base_config['BASE_URL']}/knihy"
            self.logger.info(f"üåê DEBUG: URL = {url}")
            
            response = self.make_request('GET', url)
            if not response:
                self.logger.error("‚ùå DEBUG: ≈Ωiadna odpoveƒè z servera")
                return []
            
            self.logger.info(f"‚úÖ DEBUG: Odpoveƒè z√≠skan√°, status: {response.status_code}")
            self.logger.info(f"üìÑ DEBUG: HTML dƒ∫≈æka: {len(response.text)} znakov")
            
            # Uk√°≈æ prv√Ωch 500 znakov HTML pre debug
            html_preview = response.text[:500].replace('\n', ' ')
            self.logger.info(f"üîç DEBUG: HTML zaƒçiatok: {html_preview}")
            
            books = self._debug_parse_html(response.text, limit)
            
            self.logger.info(f"üìä DEBUG: Extrahovan√Ωch {len(books)} kn√≠h")
            for i, book in enumerate(books, 1):
                self.logger.info(f"  üìñ DEBUG #{i}: '{book['title']}' - '{book['author_name']}'")
            
            return books
            
        except Exception as e:
            self.logger.error(f"‚ùå DEBUG: Kritick√° chyba: {e}")
            import traceback
            self.logger.error(f"üî• DEBUG: Traceback: {traceback.format_exc()}")
            return []
    
    def get_book_details(self, book_id: str, book_url: str = None):
        return {}
    
    def _debug_parse_html(self, html: str, limit: int) -> List[Dict[str, Any]]:
        books = []
        
        try:
            # DEBUG: Sk√∫s r√¥zne selektory a uk√°≈æ v√Ωsledky
            selectors = {
                'product_divs': r'<div[^>]*class="[^"]*product[^"]*"[^>]*>',
                'item_divs': r'<div[^>]*class="[^"]*item[^"]*"[^>]*>',
                'book_divs': r'<div[^>]*class="[^"]*book[^"]*"[^>]*>',
                'articles': r'<article[^>]*>',
                'h_tags': r'<h[1-6][^>]*>',
                'links_with_kniha': r'<a[^>]*href="[^"]*kniha[^"]*"',
                'all_links': r'<a[^>]*href=',
            }
            
            for name, pattern in selectors.items():
                matches = re.findall(pattern, html, re.IGNORECASE)
                self.logger.info(f"üîç DEBUG: {name} = {len(matches)} zhod√≠")
            
            # Sk√∫s najjednoduch≈°√≠ pr√≠stup - hƒæadaj v≈°etky H tagy
            h_tags = re.findall(r'<h[1-6][^>]*>(.*?)</h[1-6]>', html, re.DOTALL | re.IGNORECASE)
            self.logger.info(f"üìù DEBUG: Na≈°iel {len(h_tags)} H tagov")
            
            # Uk√°≈æ prv√Ωch 5 H tagov
            for i, h_tag in enumerate(h_tags[:5], 1):
                clean_h = re.sub(r'<[^>]+>', '', h_tag).strip()[:100]
                self.logger.info(f"  üè∑Ô∏è DEBUG H{i}: {clean_h}")
            
            # Sk√∫s n√°js≈• linky
            links = re.findall(r'<a[^>]*href="([^"]*)"[^>]*>(.*?)</a>', html, re.DOTALL | re.IGNORECASE)
            self.logger.info(f"üîó DEBUG: Na≈°iel {len(links)} linkov")
            
            # Uk√°≈æ prv√Ωch 5 linkov
            for i, (href, text) in enumerate(links[:5], 1):
                clean_text = re.sub(r'<[^>]+>', '', text).strip()[:50]
                self.logger.info(f"  üîó DEBUG Link{i}: {href} -> {clean_text}")
            
            # Vytvor testovn√© knihy z H tagov alebo linkov
            sources = h_tags[:limit] if h_tags else [text for href, text in links[:limit]]
            
            for i, source in enumerate(sources):
                clean_title = re.sub(r'<[^>]+>', '', source).strip()
                
                if len(clean_title) > 5:  # Iba ak m√° rozumn√Ω n√°zov
                    book = {
                        'external_id': f'D-debug-{i+1}',
                        'title': clean_title[:100],  # Obmedzenie dƒ∫≈æky
                        'title_cz': clean_title[:100],
                        'author_name': f'Debug Autor {i+1}',
                        'category': 'Debug Kateg√≥ria',
                        'year': 2024,
                        'pages': None,
                        'isbn': None,
                        'image_url': '',
                        'product_url': '',
                        'description': 'Debug kniha extrahovan√° zo str√°nky',
                        'publisher': '',
                        'language': 'cs',
                        'price': None,
                    }
                    books.append(book)
            
            return books
            
        except Exception as e:
            self.logger.error(f"‚ùå DEBUG: Parsing zlyhal: {e}")
            return []
