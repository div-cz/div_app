# div_content/management/commands/update_books.py

"""Django Management Command pre aktualiz√°ciu kn√≠h z Dobrovsk√Ω"""

import logging
from datetime import datetime

from django.core.management.base import BaseCommand, CommandError
from django.db import transaction

# Import z na≈°ej div_management ≈°trukt√∫ry
from div_management.books.book_update_service import BookUpdateService
from div_management.shared.universal_logger import setup_logging, get_logger
from div_management.configs.paths_config import ensure_directories

class Command(BaseCommand):
    help = 'Aktualizuje knihy z Knihy Dobrovsk√Ω'
    
    def add_arguments(self, parser):
        parser.add_argument(
            '--limit',
            type=int,
            default=200,
            help='Poƒçet kn√≠h na spracovanie (default: 200)'
        )
        
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='Testovac√≠ re≈æim bez ukladania do datab√°zy'
        )
        
        parser.add_argument(
            '--verbose',
            action='store_true',
            help='Detailn√Ω v√Ωstup pre debugging'
        )
        
        parser.add_argument(
            '--force-update',
            action='store_true',
            help='Vyn√∫ti aktualiz√°ciu aj existuj√∫cich kn√≠h'
        )
        
        parser.add_argument(
            '--test-single',
            action='store_true',
            help='Test s jednou knihou'
        )
    
    def handle(self, *args, **options):
        """Hlavn√° met√≥da management commandu"""
        
        start_time = datetime.now()
        
        # Zabezpeƒç existenciu adres√°rov
        ensure_directories()
        
        # Setup logovania
        setup_logging(verbose=options['verbose'])
        logger = get_logger('books', 'books_update')
        
        # Nastavenia
        dry_run = options['dry_run']
        verbose = options['verbose']
        force_update = options['force_update']
        limit = options['limit']
        
        # Test mode
        if options['test_single']:
            limit = 1
            verbose = True
        
        # √övodn√° spr√°va
        mode = "DRY RUN" if dry_run else "PRODUCTION"
        self.stdout.write(
            self.style.SUCCESS(
                f"üöÄ Sp√∫≈°≈•am aktualiz√°ciu kn√≠h z Dobrovsk√Ω ({mode})"
            )
        )
        self.stdout.write(f"üìã Parametre: limit={limit}, force_update={force_update}")
        
        try:
            # Vytvor service
            update_service = BookUpdateService(dry_run=dry_run)
            
            # Spusti aktualiz√°ciu
            with transaction.atomic():
                if dry_run:
                    # V dry-run re≈æime nevykon√°vaj skutoƒçn√© transakcie
                    transaction.set_rollback(True)
                
                result = update_service.update_books_from_dobrovsky(
                    limit=limit,
                    force_update=force_update
                )
            
            # V√Ωsledn√Ω report
            self._print_summary(result, start_time)
            
            # Log fin√°lneho stavu
            logger.info(f"‚úÖ Command dokonƒçen√Ω √∫spe≈°ne: {result}")
            
        except KeyboardInterrupt:
            self.stdout.write(
                self.style.WARNING("‚ö†Ô∏è Aktualiz√°cia preru≈°en√° pou≈æ√≠vateƒæom")
            )
            logger.warning("Command preru≈°en√Ω pou≈æ√≠vateƒæom")
            
        except Exception as e:
            error_msg = f"‚ùå Kritick√° chyba: {e}"
            self.stdout.write(self.style.ERROR(error_msg))
            logger.error(error_msg, exc_info=True)
            raise CommandError(f"Command zlyhal: {e}")
    
    def _print_summary(self, result: dict, start_time: datetime):
        """Vyp√≠≈°e s√∫hrn v√Ωsledkov"""
        
        duration = datetime.now() - start_time
        
        # Hlavn√Ω s√∫hrn
        self.stdout.write("\n" + "="*50)
        self.stdout.write(self.style.SUCCESS("üìä S√öHRN AKTUALIZ√ÅCIE"))
        self.stdout.write("="*50)
        
        # ≈†tatistiky
        stats_lines = [
            f"‚è±Ô∏è  ƒåas behu: {duration.total_seconds():.1f}s",
            f"üìñ Spracovan√©: {result['processed']}",
            f"‚úÖ Vytvoren√©: {result['created']}",
            f"üîÑ Aktualizovan√©: {result['updated']}",
            f"‚è≠Ô∏è  Preskoƒçen√©: {result['skipped']}",
            f"‚ùå Chyby: {result['errors']}"
        ]
        
        for line in stats_lines:
            self.stdout.write(line)
        
        # Farebn√Ω s√∫hrn
        total_success = result['created'] + result['updated']
        if result['errors'] == 0:
            status_style = self.style.SUCCESS
            status_msg = "‚úÖ √öSPE≈†NE DOKONƒåEN√â"
        elif result['errors'] < result['processed'] / 2:
            status_style = self.style.WARNING  
            status_msg = "‚ö†Ô∏è DOKONƒåEN√â S CHYBAMI"
        else:
            status_style = self.style.ERROR
            status_msg = "‚ùå ZLYHALO"
        
        self.stdout.write("\n" + status_style(status_msg))
        
        # Dodatoƒçn√© inform√°cie
        if total_success > 0:
            self.stdout.write(
                self.style.SUCCESS(f"üéâ √öspe≈°ne spracovan√Ωch {total_success} kn√≠h!")
            )
        
        if result['errors'] > 0:
            self.stdout.write(
                self.style.WARNING(
                    f"‚ö†Ô∏è Skontrolujte logy pre {result['errors']} ch√Ωb"
                )
            )
        
        # Odpor√∫ƒçania
        self._print_recommendations(result)
        
        self.stdout.write("="*50 + "\n")
    
    def _print_recommendations(self, result: dict):
        """Vyp√≠≈°e odpor√∫ƒçania na z√°klade v√Ωsledkov"""
        
        recommendations = []
        
        # Ak bolo veƒæa ch√Ωb
        if result['errors'] > result['processed'] * 0.1:  # Viac ako 10% ch√Ωb
            recommendations.append(
                "üîß Veƒæa ch√Ωb - skontrolujte dostupnos≈• Dobrovsk√Ω servera"
            )
        
        # Ak bolo veƒæa preskoƒçen√Ωch
        if result['skipped'] > result['processed'] * 0.5:  # Viac ako 50% preskoƒçen√Ωch
            recommendations.append(
                "üìà Veƒæa duplik√°tov - zv√°≈æte --force-update pre aktualiz√°ciu"
            )
        
        # Ak bolo m√°lo vytvoren√Ωch
        if result['created'] == 0 and not result['updated']:
            recommendations.append(
                "üìö ≈Ωiadne nov√© knihy - mo≈æno zv√Ω≈°te --limit alebo skontrolujte zdroj"
            )
        
        # Ak bolo v≈°etko v poriadku
        if not recommendations and result['processed'] > 0:
            recommendations.append(
                "‚ú® V≈°etko prebehlo hladko! M√¥≈æete zv√Ω≈°i≈• --limit pre viac kn√≠h"
            )
        
        if recommendations:
            self.stdout.write("\nüí° ODPOR√öƒåANIA:")
            for rec in recommendations:
                self.stdout.write(f"   {rec}")

